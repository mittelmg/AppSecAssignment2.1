Database Models Encryption:
To Implement this I imported the django-cryptography module. From this I used the encrypt() function which I wrapped around the sensative feilds in my card class. 
Specficially, I wrapped encrypt around the class variables fp, data, and amount because these are the data that are most sensative and could be useful if the data was leaked.
Encrypyting these values will block any hacker who might obtain the records from using the cards. 

The encrypt() function is very useful because it both encrypts and decrypts the data as needed using the value I set for SECRET_KEY.

Key Management:
To truely potect my encrypted data above I need to protect my SECRET_KEY and other sensative values such as DEBUG. 
To protect these, I need to seperate their values from my source code. I can do so using the python-decouple database.
To implement, I first created a .env file in my root directory and copied my sensative values, DEBUG and SECRET_KEY into .env.
In settings.py I then make these value's accessable but importing python decoupe and using its congif() function to connect my env file with settings.
For instance, in settings I can make my secret key in .env by setting SECRET_KEY = config('SECRET_KEY'). The config function will then look for the secret key value stored in .env and load it into the SECRET_KEY valriable in settings.py.
I repeat the procedure for DEBUG.
This process sucessfully seperates my sensative key values into env and decouples my source code from these so that their plain text values aren't sitting in the code waiting to be stolen. 

